buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
        springPlatformVersion = '2.0.3.RELEASE'
        manifestVendor='com.github.corneil'
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'

dependencyManagement {
    imports {
        mavenBom "io.spring.platform:platform-bom:${springPlatformVersion}"
    }
    dependencies {
        dependency 'org.projectlombok:lombok:1.16.6'
        dependency 'org.webjars.bower:angular:1.5.2'
        dependency 'org.webjars.bower:angular-material:1.0.6'

    }
}
configurations {
    providedRuntime
    webjars
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    doFirst {
        manifest {
            attributes('Manifest-Version': '1.0',
                    'Created-By': manifestVendor,
                    'Specification-Title': description,
                    'Specification-Version': version,
                    'Specification-Vendor': manifestVendor,
                    'Implementation-Title': description,
                    'Implementation-Version': version,
                    'Implementation-Vendor': manifestVendor
            )
        }
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.data:spring-data-rest-hal-browser'
    compile 'org.springframework.boot:spring-boot-starter-groovy-templates'
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.projectlombok:lombok'
    compile('commons-dbcp:commons-dbcp') {
        exclude(module: 'commons-logging')
        exclude(module: 'xml-apis')
    }
    compile 'javax.el:javax.el-api'



    webjars 'org.webjars.bower:angular'
    webjars 'org.webjars.bower:angular-material'
    compile configurations.webjars
    runtime 'com.h2database:h2'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
}



bootRepackage {
    mainClass = 'com.github.corneil.data_rest_demo.SpringDataRestAngularDemoApplication'
}

bootRun {
    addResources = true
}

eclipse {
    classpath {
        containers.remove 'org.eclipse.jdt.launching.JRE_CONTAINER'
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task cleanTestJpa(type: Delete) {
    delete fileTree('.') {
        include 'demo-rest.*db'
    }
}

def webJars = new File(project.buildDir, 'webjars')
def resourcesDir = new File(sourceSets.main.output.resourcesDir, 'static/resources')
task expandWebJars(type: Copy) {
    into webJars
    configurations.webjars.resolve().each {
        from zipTree(it.absoluteFile)
    }
}

task copyWebJars(type: Copy, dependsOn: expandWebJars) {
    destinationDir = resourcesDir
    from webJars
}

// processResources.dependsOn copyWebJars
processResources.dependsOn expandWebJars

task cleanJars(type: Delete) {
    delete resourcesDir
    delete webJars
}

clean.dependsOn cleanJars
cleanTest.dependsOn cleanTestJpa
