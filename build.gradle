buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
        springPlatformVersion = '2.0.3.RELEASE'
        manifestVendor = 'com.github.corneil'
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath localGroovy()
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}


apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'

dependencyManagement {
    imports {
        mavenBom "io.spring.platform:platform-bom:${springPlatformVersion}"
    }
    dependencies {
        dependency 'org.projectlombok:lombok:1.16.6'
        dependency 'org.webjars.bower:angular:1.5.3'
        dependency 'org.webjars.bower:angular-route:1.5.3'
        dependency 'org.webjars.bower:angular-resource:1.5.3'
        dependency 'org.webjars.bower:angular-animate:1.5.3'
        dependency 'org.webjars.bower:angular-messages:1.5.3'
        dependency 'org.webjars.bower:angular-aria:1.5.3'
        dependency 'org.webjars.bower:angular-material:1.0.7'
        dependency 'org.webjars.bower:angular-gravatar:0.4.1'
        dependency 'org.webjars:material-design-icons:2.2.0'
        dependency 'org.webjars.bower:moment:2.12.0'
        dependency 'org.webjars.bower:angular-material-data-table:0.10.3'
    }
}

configurations {
    providedRuntime
    svgIcons
    webJarsBower
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    doFirst {
        manifest {
            attributes('Manifest-Version': '1.0',
                    'Created-By': manifestVendor,
                    'Specification-Title': description,
                    'Specification-Version': version,
                    'Specification-Vendor': manifestVendor,
                    'Implementation-Title': description,
                    'Implementation-Version': version,
                    'Implementation-Vendor': manifestVendor
            )
        }
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.data:spring-data-rest-hal-browser'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.projectlombok:lombok'
    compile('commons-dbcp:commons-dbcp') {
        exclude(module: 'commons-logging')
        exclude(module: 'xml-apis')
    }
    compile 'javax.el:javax.el-api'
    webJarsBower 'org.webjars.bower:angular'
    webJarsBower 'org.webjars.bower:angular-route'
    webJarsBower 'org.webjars.bower:angular-resource'
    webJarsBower 'org.webjars.bower:angular-animate'
    webJarsBower 'org.webjars.bower:angular-messages'
    webJarsBower 'org.webjars.bower:angular-aria'
    webJarsBower 'org.webjars.bower:angular-material'
    webJarsBower 'org.webjars.bower:angular-gravatar'
    webJarsBower 'org.webjars.bower:angular-material-data-table'
    webJarsBower 'org.webjars.bower:moment'

    svgIcons 'org.webjars:material-design-icons'
    runtime 'com.h2database:h2'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

bootRepackage {
    mainClass = 'com.github.corneil.data_rest_demo.SpringDataRestAngularDemoApplication'
}

bootRun {
    addResources = true
}

eclipse {
    classpath {
        containers.remove 'org.eclipse.jdt.launching.JRE_CONTAINER'
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task cleanTestJpa(type: Delete) {
    delete fileTree('.') {
        include 'demo-rest.*db'
    }
}

def svgIcons = new File(project.projectDir, 'extracted/svgIcons')
task expandSvgIcons(type: Copy) {
    doFirst {
        svgIcons.mkdirs()
    }
    into svgIcons
    configurations.svgIcons.resolve().each {
        from zipTree(it.absoluteFile)
        include '**/*24*.svg'
        include '**/*black_24*.png'
    }
}


def webJarsBower = new File(project.buildDir, 'webjarsBower')
task expandWebJarsBower(type: Copy) {
    into webJarsBower
    configurations.webJarsBower.resolve().each {
        from zipTree(it.absoluteFile)
    }
}

def extractName(String name, String suffix) {
    if(name.endsWith(suffix)) {
        return name - suffix
    }
    return null
}

task createSvgIconSets(dependsOn: expandSvgIcons) {
    def baseDir = new File(svgIcons, 'META-INF/resources/webjars/material-design-icons/2.2.0')
    def iconsDir = new File(project.projectDir, 'src/main/resources/static/iconsets/svg')
    inputs.files fileTree(dir:baseDir, include:'**/svg/production/*.svg')
    outputs.dir iconsDir
    doLast {
        iconsDir.mkdirs()
        baseDir.eachDir { dir ->
            def prodDir = new File(dir, 'svg/production')
            if(prodDir.exists()) {
                def inputTree = fileTree(dir:prodDir, include:'*.svg')
                def iconSet = new File(iconsDir, "$dir.name-icons.svg")
                if(!iconSet.exists()) {
                    def writer = new FileWriter(iconSet)
                    def pw = new PrintWriter(writer)
                    pw << '<svg><defs>\n'
                    def icons = new HashSet()
                    def suffix = '_24px.svg'
                    logger.info "$project.path:scanning:$prodDir for $suffix"
                    inputTree.files.each { svg ->
                        def name = extractName(svg.name, suffix)
                        if (name && !icons.contains(name)) {
                            icons.add(name)
                            logger.info "${project.path}:adding ${svg.name} to ${iconSet.name}"
                            def svgIcon = new XmlSlurper().parseText(svg.text)
                            pw << "<g id='$name'><path d='${svgIcon.path.@d}'/></g>\n"
                        }
                    }
                    pw << '</defs></svg>\n'
                    writer.close()
                    logger.lifecycle "$project.path:created:$iconSet.name"
                }
            }
        }
    }
}

task copyWebJarsBower(type: Copy, dependsOn: expandWebJarsBower) {
    destinationDir = sourceSets.main.output.resourcesDir
    from webJarsBower
}


// processResources.dependsOn createSvgIconSets
processResources.dependsOn copyWebJarsBower

cleanTest.dependsOn cleanTestJpa
